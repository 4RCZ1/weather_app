{"version":3,"file":"static/js/455.86cfeca6.chunk.js","mappings":"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","sources":["Helpers/useCurrentWidth.ts","Modules/WeatherData/DayNightCycle.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst getWidth = () => window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n\r\nfunction useCurrentWidth() {\r\n    // save current window width in the state object\r\n    let [width, setWidth] = useState(getWidth());\r\n\r\n    // in this case useEffect will execute only once because\r\n    // it does not have any dependencies.\r\n    useEffect(() => {\r\n        // timeoutId for debounce mechanism\r\n        let timeoutId: NodeJS.Timeout | null = null;\r\n        const resizeListener = () => {\r\n            // prevent execution of previous setTimeout\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            // change width from the state object after 150 milliseconds\r\n            timeoutId = setTimeout(() => setWidth(getWidth()), 10);\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        // clean up function\r\n        return () => {\r\n            // remove resize listener\r\n            window.removeEventListener('resize', resizeListener);\r\n        }\r\n    }, [])\r\n\r\n    return width;\r\n}\r\nexport default useCurrentWidth;\r\n","import React, {useEffect, useState} from 'react';\r\nimport useCurrentWidth from \"../../Helpers/useCurrentWidth\";\r\n\r\ninterface Cycle {\r\n    sunrise: number,\r\n    sunset: number,\r\n    localtime_epoch: number,\r\n    timeDifference: number;\r\n    moonPhase: string;\r\n    moonIllumination: number;\r\n}\r\n\r\nfunction isInViewport(element: HTMLElement | null): boolean {\r\n    if (element === null) {\r\n        return false;\r\n    }\r\n    const rect = element.getBoundingClientRect();\r\n    return (\r\n        rect.top >= element.clientHeight/2\r\n    );\r\n}\r\n\r\nconst clearCanvas = (canvas: HTMLCanvasElement | null) => {\r\n    if (canvas !== null) {\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx !== null) {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @description This component is responsible for drawing the day/night cycle\r\n * @param sunrise timestamp of sunrise in seconds\r\n * @param sunset timestamp of sunset in seconds\r\n * @param timezone timezone offset in seconds\r\n */\r\nconst DayNightCycle = ({sunrise, sunset, localtime_epoch, timeDifference, moonPhase, moonIllumination}: Cycle) => {\r\n    const [, setIntervals] = useState<number>(0);\r\n    let mainStep = 0;\r\n    const maxMainStep = 90;\r\n    const dayLength = sunset - sunrise;\r\n    const dayNightProportion = dayLength / (24 * 60 * 60);\r\n    const currentDate = localtime_epoch * 1000;\r\n    const sunsetDate = sunset * 1000;\r\n    const sunriseDate = sunrise * 1000;\r\n    const midnightDate = Math.floor(new Date(new Date().getTime() + timeDifference * 1000).setHours(0, 0, 0, 0));\r\n    const secondsSinceMidnight = (currentDate - midnightDate) / 1000;\r\n\r\n    const sunriseDateString = new Date(sunriseDate).toLocaleTimeString().slice(0, -3);\r\n    const sunsetDateString = new Date(sunsetDate).toLocaleTimeString().slice(0, -3);\r\n    const currentDateString = new Date(currentDate).toLocaleTimeString().slice(0, -3);\r\n\r\n    const currentWidth = useCurrentWidth();\r\n    const canvasWidth = currentWidth > 768 ? (currentWidth - 50) * 0.9 : (currentWidth - 50) * 0.98;\r\n\r\n    let SunX: number | null = null;\r\n    const setSunX = (val: number) => {\r\n        if (SunX === null) {\r\n            SunX = Math.floor(val);\r\n        }\r\n    }\r\n\r\n    const quickDraw = () => {\r\n        SunX = null;\r\n        const canvas = document.getElementById('canvas1') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            const ctx = canvas.getContext('2d');\r\n            const width = canvas.width;\r\n            const height = canvas.height;\r\n            const horizon = height / 6 * 4 * dayNightProportion + height / 6;\r\n            setSunX(width / 24 / 60 / 60 * secondsSinceMidnight);\r\n            if (ctx) {\r\n                clearCanvas(canvas);\r\n                const dayNightGradient = ctx.createLinearGradient(0, horizon - height / 15, 0, horizon + height / 20);\r\n                dayNightGradient.addColorStop(0, '#487aff');\r\n                dayNightGradient.addColorStop(1, '#111f69');\r\n                dayNightGradient.addColorStop(horizon / height + 1 / 6, '#ff9116');\r\n                ctx.strokeStyle = dayNightGradient;\r\n                let x2 = 0;\r\n                for (mainStep = 0; mainStep <= maxMainStep; mainStep++) {\r\n                    const substepsPerStep = Math.abs(Math.ceil(1.5 * (width / maxMainStep) * Math.sin((width / maxMainStep * mainStep) / width * Math.PI)));\r\n                    for (let j = 0; j < substepsPerStep; j++) {\r\n                        const y = height / 2;\r\n                        x2++;\r\n                        const radians = x2 / width * Math.PI * 2;\r\n                        const y2 = y + height / 3 * Math.cos(radians);\r\n                        if (ctx) {\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(x2 - 1, horizon);\r\n                            ctx.lineTo(x2, y2);\r\n                            ctx.stroke();\r\n                        }\r\n                        // @ts-ignore\r\n                        if (x2 <= SunX) {\r\n                            const canvas2 = document.getElementById('canvas2') as HTMLCanvasElement;\r\n                            if (canvas2) {\r\n                                const ctx2 = canvas2.getContext('2d');\r\n                                if (ctx2) {\r\n                                    clearCanvas(canvas2);\r\n                                    const color = y2 <= horizon ? '#ffe100' : '#525d5d';\r\n                                    ctx2.strokeStyle = color;\r\n                                    ctx2.fillStyle = color;\r\n                                    ctx2.beginPath();\r\n                                    ctx2.arc(x2, y2, width / 40, 0, 2 * Math.PI);\r\n                                    ctx2.fill();\r\n                                    ctx2.stroke();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const initialAnimation = () => {\r\n        const canvas = document.getElementById('canvas1') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            const ctx = canvas.getContext('2d');\r\n            const width = canvas.width;\r\n            const height = canvas.height;\r\n            const horizon = height / 6 * 4 * dayNightProportion + height / 6;\r\n            console.log(width)\r\n            // draw a black line fron 0 to width\r\n            if (ctx) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(width/2, height);\r\n                ctx.lineTo(width/2, 0);\r\n                ctx.strokeStyle = '#000000';\r\n                ctx.stroke();\r\n            }\r\n            setSunX(width / 24 / 60 / 60 * 86400);\r\n            if (ctx) {\r\n                const dayNightGradient = ctx.createLinearGradient(0, horizon - height / 15, 0, horizon + height / 20);\r\n                dayNightGradient.addColorStop(0, '#487aff');\r\n                dayNightGradient.addColorStop(1, '#111f69');\r\n                dayNightGradient.addColorStop(horizon / height + 1 / 6, '#ff9116');\r\n                ctx.strokeStyle = dayNightGradient;\r\n                requestAnimationFrame(() => animationStep(ctx, width, height, 0, horizon));\r\n            }\r\n        }\r\n    }\r\n    const bezier = (t: number) => {\r\n        console.log(t);\r\n        return t * t * (3 - 2 * t);\r\n    }\r\n    let sum = 0;\r\n    const animationStep = (ctx: CanvasRenderingContext2D, width: number, height: number, prevX: number, horizon: number) => {\r\n        const substepsPerStep = Math.ceil((width / maxMainStep) * (0.958 - 0.5 * Math.cos((Math.PI * mainStep) / maxMainStep)));\r\n        console.log(bezier(mainStep / maxMainStep) - bezier(mainStep-1 / maxMainStep))\r\n        sum += bezier(mainStep / maxMainStep) - bezier(mainStep-1 / maxMainStep)\r\n        console.log(sum)\r\n        let x2 = prevX;\r\n        for (let i = 0; i < substepsPerStep; i++) {\r\n            const y = height / 2;\r\n            x2++;\r\n            const radians = x2 / width * Math.PI * 2;\r\n            const y2 = y + height / 3 * Math.cos(radians);\r\n            if (ctx) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(x2 - 1, horizon);\r\n                ctx.lineTo(x2, y2);\r\n                ctx.stroke();\r\n            }\r\n            // @ts-ignore\r\n            if (x2 <= SunX) {\r\n                const canvas2 = document.getElementById('canvas2') as HTMLCanvasElement;\r\n                if (canvas2) {\r\n                    const ctx2 = canvas2.getContext('2d');\r\n                    if (ctx2) {\r\n                        clearCanvas(canvas2);\r\n                        const color = y2 <= horizon ? '#ffe100' : '#525d5d';\r\n                        ctx2.strokeStyle = color;\r\n                        ctx2.fillStyle = color;\r\n                        ctx2.beginPath();\r\n                        ctx2.arc(x2, y2, width / 140, 0, 2 * Math.PI);\r\n                        ctx2.fill();\r\n                        ctx2.stroke();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mainStep++;\r\n        if (mainStep <= maxMainStep) {\r\n            requestAnimationFrame(() => animationStep(ctx, width, height, x2, horizon));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval: null | NodeJS.Timeout = null;\r\n        let timeoutId: NodeJS.Timeout | null = null;\r\n        const resizeListener = () => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            timeoutId = setTimeout(() => quickDraw(), 10);\r\n        };\r\n        setIntervals(prev => prev + 1);\r\n        interval = setInterval(() => {\r\n            if (isInViewport(document.getElementById('canvas1'))) {\r\n                if (interval) {\r\n                    clearInterval(interval);\r\n                }\r\n\r\n                // @ts-ignore\r\n                clearCanvas(document.getElementById('canvas1'));\r\n                clearCanvas(document.getElementById('canvas2') as HTMLCanvasElement);\r\n                initialAnimation();\r\n                window.addEventListener('resize', resizeListener);\r\n            }\r\n        }, 200);\r\n        return () => {\r\n            if (interval) {\r\n                clearInterval(interval);\r\n                window.removeEventListener('resize', resizeListener);\r\n            }\r\n        }\r\n    }, [sunrise, sunset]);\r\n\r\n\r\n    return (\r\n        <div id={'dayNightCycle'} className=\"mainBoxes\">\r\n            <h3>Day/night cycle</h3>\r\n            <div className=\"wrapper\">\r\n                <p>sunrise: {sunriseDateString}</p>\r\n                <span className={'line'}/>\r\n                <p className={'center'}>sunset: {sunsetDateString}</p>\r\n                <span className={'line'}/>\r\n                <p className={'center'}>current time: {currentDateString}</p>\r\n                <span className={'line'}/>\r\n                <p>day length:\r\n                    {Math.floor(dayLength / 60 / 60)}:{Math.floor((dayLength - Math.floor(dayLength / 60 / 60) * 60 * 60) / 60)}</p>\r\n            </div>\r\n            <div id={'dayNightCycleContainer'}>\r\n                <canvas id={'canvas1'} width={canvasWidth} height={canvasWidth * 0.3}/>\r\n                <canvas id={'canvas2'} width={canvasWidth} height={canvasWidth * 0.3}/>\r\n            </div>\r\n            <p id={'moon'}>Moon phase: {moonPhase}, Moon illumination: {moonIllumination}%</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayNightCycle;\r\n"],"names":["getWidth","window","innerWidth","document","documentElement","clientWidth","body","width","setWidth","useState","useEffect","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","clearCanvas","canvas","ctx","getContext","clearRect","height","_ref","sunrise","sunset","localtime_epoch","timeDifference","moonPhase","moonIllumination","setIntervals","mainStep","maxMainStep","dayLength","dayNightProportion","currentDate","sunsetDate","sunriseDate","secondsSinceMidnight","Math","floor","Date","getTime","setHours","sunriseDateString","toLocaleTimeString","slice","sunsetDateString","currentDateString","currentWidth","useCurrentWidth","canvasWidth","SunX","setSunX","val","bezier","t","console","log","sum","animationStep","prevX","horizon","substepsPerStep","ceil","cos","PI","x2","i","y","radians","y2","beginPath","moveTo","lineTo","stroke","canvas2","getElementById","ctx2","color","strokeStyle","fillStyle","arc","fill","requestAnimationFrame","interval","quickDraw","dayNightGradient","createLinearGradient","addColorStop","abs","sin","j","prev","setInterval","element","getBoundingClientRect","top","clientHeight","clearInterval","initialAnimation","_jsxs","id","className","children","_jsx"],"sourceRoot":""}