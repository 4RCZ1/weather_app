{"version":3,"file":"static/js/569.1664ae06.chunk.js","mappings":"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","sources":["Modules/WeatherData/Temperature.tsx","Modules/WeatherData/Type.tsx","Modules/WeatherData/Mocks.ts","Modules/TimeFetcher.tsx","Modules/WeatherData/Wind/Arrow.tsx","Modules/WeatherData/Wind/Compass.tsx","Modules/WeatherData/Wind.tsx","Modules/WeatherData/Details.tsx","Helpers/Modal.tsx","Services/WeatherAPI.ts","Modules/WeatherDetails.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ninterface temp {\r\n    temp: number;\r\n    feels_like: number;\r\n    units: string;\r\n}\r\n\r\nconst Temperature = ({temp, feels_like, units}: temp) => {\r\n    return (\r\n        <div id=\"temp\" className=\"mainBoxes\">\r\n            <p>Temperature: {temp}°{units === 'F' ? 'F' : 'C'}</p>\r\n            <p>Feels like: {feels_like}°{units === 'F' ? 'F' : 'C'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Temperature;\r\n","import React, {useEffect} from 'react';\r\n\r\ninterface WeatherType {\r\n    type: {\r\n        description: string;\r\n        icon: string;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst Type = ({type}: WeatherType) => {\r\n    const [imageUrl, setImageUrl] = React.useState<string>('https:' + type.icon);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout | null = null;\r\n        const resizeListener = () => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            const weatherIcon = document.getElementById('icon') as HTMLImageElement;\r\n            const size = weatherIcon.width>64?'128x128':'64x64';\r\n            timeoutId = setTimeout(() => setImageUrl(imageUrl.slice(0,35) + size + imageUrl.slice(40)), 100);\r\n        }\r\n        window.addEventListener('resize',resizeListener);\r\n        return () => {\r\n            window.removeEventListener('resize',resizeListener);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"type\" className=\"mainBoxes\">\r\n            <h3>{type.description}</h3>\r\n            <img id={'icon'} width={128} height={128} src={imageUrl} alt={type.description}/>\r\n        </div>\r\n    );\r\n};\r\nexport default Type;\r\n","export const ASTRONOMY = {\r\n    \"location\": {\r\n        \"name\": \"Kolbacz\",\r\n        \"region\": \"\",\r\n        \"country\": \"Poland\",\r\n        \"lat\": 53.3,\r\n        \"lon\": 14.81,\r\n        \"tz_id\": \"Europe/Warsaw\",\r\n        \"localtime_epoch\": 1641590350,\r\n        \"localtime\": \"2022-01-07 22:19\"\r\n    },\r\n    \"astronomy\": {\r\n        \"astro\": {\r\n            \"sunrise\": \"08:14 AM\",\r\n            \"sunset\": \"04:01 PM\",\r\n            \"moonrise\": \"11:10 AM\",\r\n            \"moonset\": \"10:08 PM\",\r\n            \"moon_phase\": \"Waxing Crescent\",\r\n            \"moon_illumination\": \"30\"\r\n        }\r\n    }\r\n}\r\n\r\nexport const WEATHER = {\r\n    \"location\": {\r\n        \"name\": \"Kolbacz\",\r\n        \"region\": \"\",\r\n        \"country\": \"Poland\",\r\n        \"lat\": 53.3,\r\n        \"lon\": 14.81,\r\n        \"tz_id\": \"Europe/Warsaw\",\r\n        \"localtime_epoch\": 1641590350,\r\n        \"localtime\": \"2022-01-07 22:19\"\r\n    },\r\n    \"current\": {\r\n        \"last_updated_epoch\": 1641590100,\r\n        \"last_updated\": \"2022-01-07 22:15\",\r\n        \"temp_c\": 1.0,\r\n        \"temp_f\": 33.8,\r\n        \"is_day\": 0,\r\n        \"condition\": {\"text\": \"Overcast\", \"icon\": \"//cdn.weatherapi.com/weather/64x64/night/122.png\", \"code\": 1009},\r\n        \"wind_mph\": 3.8,\r\n        \"wind_kph\": 6.1,\r\n        \"wind_degree\": 190,\r\n        \"wind_dir\": \"S\",\r\n        \"pressure_mb\": 1010.0,\r\n        \"pressure_in\": 29.83,\r\n        \"precip_mm\": 0.1,\r\n        \"precip_in\": 0.0,\r\n        \"humidity\": 100,\r\n        \"cloud\": 100,\r\n        \"feelslike_c\": -3.2,\r\n        \"feelslike_f\": 26.2,\r\n        \"vis_km\": 10.0,\r\n        \"vis_miles\": 6.0,\r\n        \"uv\": 1.0,\r\n        \"gust_mph\": 13.9,\r\n        \"gust_kph\": 22.3\r\n    }\r\n}\r\n","import React, {useEffect, lazy} from 'react';\r\nimport axios from 'axios';\r\n//import DayNightCycle from \"./WeatherData/DayNightCycle\";\r\nimport {ASTRONOMY} from \"./WeatherData/Mocks\";\r\nimport {Coordinates} from \"../Services/WeatherAPI\";\r\n\r\nconst DayNightCycle = lazy(() => import('./WeatherData/DayNightCycle'));\r\n\r\ninterface Time {\r\n    moon_illumination: number;\r\n    moon_phase: string;\r\n    moonrise: number;\r\n    moonset: number;\r\n    sunrise: number;\r\n    sunset: number;\r\n    localtime_epoch: number;\r\n    localtime: string;\r\n}\r\n\r\nconst convertTime = (time: string) => {\r\n    return Math.floor(Date.parse(new Date().toDateString() + ' ' + time) / 1000);\r\n}\r\n\r\nconst TimeFetcher = ({coordinates}: { coordinates: Coordinates }) => {\r\n    const coords: string = coordinates[1] + ',' + coordinates[0];\r\n    const [time, timeSetter] = React.useState<Time | null>(null);\r\n\r\n    const options = {\r\n        method: 'GET',\r\n        url: 'https://weatherapi-com.p.rapidapi.com/astronomy.json',\r\n        params: {q: coords},\r\n        headers: {\r\n            'x-rapidapi-host': 'weatherapi-com.p.rapidapi.com',\r\n            'x-rapidapi-key': '0bedbfb065msh4d74772935f4250p1f5b5cjsn0208d1ba7eb7'\r\n        }\r\n    };\r\n\r\n    const isMock = async (mock: boolean) => {\r\n        if (mock) {\r\n            return ASTRONOMY;\r\n        }\r\n        let response = ASTRONOMY;\r\n        // @ts-ignore\r\n        await axios.request(options).then(res => {\r\n            response = res.data;\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n        return response;\r\n    };\r\n\r\n    useEffect(() => {\r\n        isMock(false).then(data => {\r\n            timeSetter(\r\n                {\r\n                    moon_illumination: parseInt(data.astronomy.astro.moon_illumination),\r\n                    moon_phase: data.astronomy.astro.moon_phase,\r\n                    moonrise: convertTime(data.astronomy.astro.moonrise),\r\n                    moonset: convertTime(data.astronomy.astro.moonset),\r\n                    sunrise: convertTime(data.astronomy.astro.sunrise),\r\n                    sunset: convertTime(data.astronomy.astro.sunset),\r\n                    localtime_epoch: data.location.localtime_epoch,\r\n                    localtime: data.location.localtime\r\n                }\r\n            )\r\n        })\r\n    }, [coords]);\r\n\r\n    if (time === null) return <div>Loading...</div>;\r\n    const timeDifference = Math.floor(Date.parse(time.localtime) / 1000) - time.localtime_epoch;\r\n    return (\r\n        <DayNightCycle sunrise={time.sunrise} sunset={time.sunset}\r\n                       localtime_epoch={Math.floor(Date.parse(time.localtime) / 1000)} timeDifference={timeDifference}\r\n                       moonPhase={time.moon_phase} moonIllumination={time.moon_illumination}/>\r\n    )\r\n}\r\n\r\nexport default TimeFetcher;\r\n","import React from 'react';\r\n\r\nconst Arrow = () => {\r\n    return (\r\n        <svg width=\"53\" height=\"53\" viewBox=\"0 0 53 53\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M13.76 16.518L36.663 39.421L39.491 36.593L16.126 13.397L14.326 14.256L13.76 16.518Z\"\r\n                  fill=\"#715C3A\"/>\r\n            <path d=\"M35.637 37.566L36.737 46.366L53 52.73L46.636 36.466L37.836 35.366L35.637 37.566Z\" fill=\"#8F8F8F\"/>\r\n            <path\r\n                d=\"M6 16.27V18.27H8V20.306L18 20.27V18.27L20 17.27V9.27H18V7.27H16V4.27H14V2.27H12V0.269997H8V8.27H0V12.27H2V14.27H4V16.27H6Z\"\r\n                fill=\"#7D7D7D\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Arrow;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {motion} from \"framer-motion\"\r\nimport {useInView} from \"react-intersection-observer\";\r\nimport Arrow from \"./Arrow\";\r\n\r\nconst spring = {\r\n    type: \"spring\",\r\n    stiffness: 500,\r\n    damping: 40,\r\n    mass: 20\r\n};\r\n\r\n\r\nconst Compass = ({deg}: { deg: number }) => {\r\n    const {ref, inView} = useInView({\r\n        threshold: .8\r\n    })\r\n    const [hasAnimated, setHasAnimated] = useState(false);\r\n    useEffect(() => {\r\n        if (inView && !hasAnimated) {\r\n            setTimeout(() => {\r\n                if (inView && !hasAnimated) {\r\n                    setHasAnimated(true);\r\n                }\r\n            }, 1000);\r\n        }\r\n    }, [inView, hasAnimated]);\r\n    return (\r\n        <div id=\"compass\">\r\n            <svg width=\"150\" height=\"150\" viewBox=\"0 0 508 508\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path\r\n                    d=\"M254 508C394.28 508 508 394.28 508 254C508 113.72 394.28 0 254 0C113.72 0 0 113.72 0 254C0 394.28 113.72 508 254 508Z\"\r\n                    fill=\"#324A5E\"/>\r\n                <path\r\n                    d=\"M254 447.2C360.701 447.2 447.2 360.701 447.2 254C447.2 147.299 360.701 60.8 254 60.8C147.299 60.8 60.8 147.299 60.8 254C60.8 360.701 147.299 447.2 254 447.2Z\"\r\n                    fill=\"#84DBFF\"/>\r\n                <path\r\n                    d=\"M254 420.4C345.9 420.4 420.4 345.9 420.4 254C420.4 162.1 345.9 87.6 254 87.6C162.1 87.6 87.6 162.1 87.6 254C87.6 345.9 162.1 420.4 254 420.4Z\"\r\n                    fill=\"white\"/>\r\n                <path\r\n                    d=\"M250.8 134.4C258.09 134.4 264 128.49 264 121.2C264 113.91 258.09 108 250.8 108C243.51 108 237.6 113.91 237.6 121.2C237.6 128.49 243.51 134.4 250.8 134.4Z\"\r\n                    fill=\"#2C9984\"/>\r\n                <path\r\n                    d=\"M250.8 395.2C258.09 395.2 264 389.29 264 382C264 374.71 258.09 368.8 250.8 368.8C243.51 368.8 237.6 374.71 237.6 382C237.6 389.29 243.51 395.2 250.8 395.2Z\"\r\n                    fill=\"#2C9984\"/>\r\n                <path\r\n                    d=\"M381.6 264.8C388.89 264.8 394.8 258.89 394.8 251.6C394.8 244.31 388.89 238.4 381.6 238.4C374.31 238.4 368.4 244.31 368.4 251.6C368.4 258.89 374.31 264.8 381.6 264.8Z\"\r\n                    fill=\"#2C9984\"/>\r\n                <path\r\n                    d=\"M120.4 264.8C127.69 264.8 133.6 258.89 133.6 251.6C133.6 244.31 127.69 238.4 120.4 238.4C113.11 238.4 107.2 244.31 107.2 251.6C107.2 258.89 113.11 264.8 120.4 264.8Z\"\r\n                    fill=\"#2C9984\"/>\r\n            </svg>\r\n            <motion.div\r\n                ref={ref}\r\n                id=\"arrow\"\r\n                transition={spring}\r\n                initial=\"hidden\"\r\n                animate={inView && !hasAnimated ? \"visible\" : ''}\r\n                variants={{\r\n                    visible: {rotate: deg},\r\n                    hidden: {rotate: deg - 90}\r\n                }}\r\n            >\r\n                <Arrow/>\r\n            </motion.div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","import React from 'react';\r\nimport Compass from './Wind/Compass';\r\n\r\ninterface windProps {\r\n    speed: number;\r\n    speed_mph: number;\r\n    deg: number;\r\n    gust: number;\r\n    gust_mph: number;\r\n    units: string;\r\n}\r\n\r\nconst Wind = ({speed, speed_mph, gust, gust_mph, deg, units}: windProps) => {\r\n    return (\r\n        <div id={\"wind\"} className={\"mainBoxes\"}>\r\n            <div className={'wrapper'}>\r\n                <div id={'values'}>\r\n                    <h3>Wind</h3>\r\n                    <p>Speed: {units === 'F' ? speed_mph + \" mph\" : speed + \" km/h\"}</p>\r\n                    <p>Gust: {units === 'F' ? gust_mph + \" mph\" : gust + \" km/h\"}</p>\r\n                    <p>{deg}°</p>\r\n                </div>\r\n                <Compass deg={deg - 135}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wind;\r\n","import React from 'react';\r\n\r\ninterface details {\r\n    humidity: number;\r\n    pressure: number;\r\n    clouds: number;\r\n}\r\n\r\nconst Details = ({humidity, pressure, clouds}: details) => {\r\n    return (\r\n        <div id=\"details\" className=\"mainBoxes\">\r\n            <h3>Details</h3>\r\n            <p>Humidity: {humidity}%</p>\r\n            <p>Pressure: {pressure} hPa</p>\r\n            <p>Clouds: {clouds}%</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Details;\r\n","import React from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst backdrop = {\r\n    visible: { opacity: 1 },\r\n    hidden: { opacity: 0 },\r\n}\r\n\r\nconst modal = {\r\n    hidden: { y: \"-100vh\", opacity: 0 },\r\n    visible: {\r\n        y: \"200px\",\r\n        opacity: 1,\r\n        transition: { delay: 0.5 }\r\n    },\r\n}\r\n\r\ninterface modalProps {\r\n    showModal: boolean,\r\n    setShowModal: React.Dispatch<React.SetStateAction<boolean>>,\r\n    buttonText: string | string[],\r\n    promptText: string,\r\n    buttonAction?: () => void\r\n}\r\n\r\nconst Modal = ({ showModal, setShowModal, buttonText, promptText, buttonAction }:modalProps) => {\r\n    return (\r\n        <AnimatePresence>\r\n            { showModal && (\r\n                <motion.div className=\"backdrop\"\r\n                            variants={backdrop}\r\n                            initial=\"hidden\"\r\n                            animate=\"visible\"\r\n                            exit=\"hidden\"\r\n                            onClick={()=>setShowModal(false)}\r\n                >\r\n                    <motion.div className=\"modal\"\r\n                                variants={modal}\r\n                    >\r\n                        <p>{promptText}</p>\r\n                        <button onClick={()=>setShowModal(false)}>{buttonText}</button>\r\n                    </motion.div>\r\n                </motion.div>\r\n            )}\r\n        </AnimatePresence>\r\n    )\r\n}\r\n\r\nexport default Modal;\r\n","import {WEATHER} from \"../Modules/WeatherData/Mocks\";\r\nimport axios from \"axios\";\r\n\r\ninterface Weather {\r\n    temp: number;\r\n    temp_f: number;\r\n    feels_like: number;\r\n    feels_like_f: number;\r\n    pressure: number;\r\n    humidity: number;\r\n    clouds: number;\r\n    weather: {\r\n        description: string;\r\n        icon: string;\r\n    };\r\n    wind: {\r\n        speed: number;\r\n        speed_mph: number;\r\n        deg: number;\r\n        gust: number;\r\n        gust_mph: number;\r\n    };\r\n}\r\n\r\ninterface Location {\r\n    name: string;\r\n    country: string;\r\n    lat: number;\r\n    lon: number;\r\n}\r\n\r\ntype WeatherAPIResponse = {\r\n    weather: Weather;\r\n    location: Location;\r\n};\r\n\r\ntype Coordinates = [longitude: number, latitude: number];\r\n\r\nclass WeatherAPI {\r\n    static getWeather = async (coordinates: Coordinates, mock?: boolean): Promise<WeatherAPIResponse | string> => {\r\n\r\n        const coords: string = coordinates[1] + ',' + coordinates[0];\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'https://weatherapi-com.p.rapidapi.com/current.json',\r\n            params: {q: coords},\r\n            headers: {\r\n                'x-rapidapi-host': 'weatherapi-com.p.rapidapi.com',\r\n                'x-rapidapi-key': '0bedbfb065msh4d74772935f4250p1f5b5cjsn0208d1ba7eb7'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const data = mock ? WEATHER : (await axios.request(options)).data;\r\n            const weather: Weather = {\r\n                temp: data.current.temp_c,\r\n                temp_f: data.current.temp_f,\r\n                feels_like: data.current.feelslike_c,\r\n                feels_like_f: data.current.feelslike_f,\r\n                pressure: data.current.pressure_mb,\r\n                humidity: data.current.humidity,\r\n                clouds: data.current.cloud,\r\n                weather: {\r\n                    description: data.current.condition.text,\r\n                    icon: data.current.condition.icon,\r\n                },\r\n                wind: {\r\n                    speed: data.current.wind_kph,\r\n                    speed_mph: data.current.wind_mph,\r\n                    deg: data.current.wind_degree,\r\n                    gust: data.current.gust_kph,\r\n                    gust_mph: data.current.gust_mph,\r\n                },\r\n            }\r\n            const location: Location = {\r\n                name: data.location.name,\r\n                country: data.location.country,\r\n                lat: data.location.lat,\r\n                lon: data.location.lon,\r\n            }\r\n            return {weather, location};\r\n        } catch (err: any) {\r\n            if (err.response) {\r\n                return err.response.data.error.message;\r\n            } else {\r\n                return \"Something went wrong\";\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default WeatherAPI;\r\nexport type {Weather, Location, Coordinates, WeatherAPIResponse};","import React, {useEffect, useState} from 'react';\r\n\r\nimport Temperature from \"./WeatherData/Temperature\";\r\nimport Type from \"./WeatherData/Type\";\r\nimport TimeFetcher from \"./TimeFetcher\";\r\nimport Wind from \"./WeatherData/Wind\";\r\nimport Details from \"./WeatherData/Details\";\r\nimport Modal from \"../Helpers/Modal\";\r\nimport WeatherAPI from \"../Services/WeatherAPI\";\r\nimport {Location, Weather, Coordinates} from \"../Services/WeatherAPI\";\r\n\r\ninterface weatherDetailsProps {\r\n    coordinates: Coordinates;\r\n    units: string;\r\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst WeatherDetails = ({coordinates, units, setLoading}: weatherDetailsProps) => {\r\n        const [weather, setWeather] = React.useState<Weather | null>(null);\r\n        const [location, setLocation] = React.useState<Location | null>(null);\r\n        const [showModal, setShowModal] = useState(false);\r\n        const [message, setMessage] = useState(\"\");\r\n\r\n\r\n        useEffect(() => {\r\n            setLoading(true);\r\n            WeatherAPI.getWeather(coordinates, false).then(weatherData => {\r\n                if (typeof weatherData === \"string\") {\r\n                    setMessage(weatherData);\r\n                    setShowModal(true);\r\n                } else {\r\n                    setWeather(weatherData.weather);\r\n                    setLocation(weatherData.location);\r\n                    const element = document.getElementById(\"weather\");\r\n                    if (element) {\r\n                        setTimeout(()=> element.scrollIntoView({behavior: \"smooth\"}), 100);\r\n                    }\r\n                }\r\n                setLoading(false);\r\n            });\r\n        }, [coordinates, setLoading]);\r\n\r\n        const weatherOutput = () => {\r\n            if (weather && location && coordinates) {\r\n                return (\r\n                    <div id={\"weather\"}>\r\n                        <Modal showModal={showModal} setShowModal={setShowModal} buttonText={\"Ok\"} promptText={message}/>\r\n                        <div className=\"mainBoxes\">\r\n                            <h1>Location: {location.name}</h1>\r\n                            <h2>Country: {location.country}</h2>\r\n                        </div>\r\n                        <Temperature temp={units === 'F' ? weather.temp_f : weather.temp}\r\n                                     feels_like={units === 'F' ? weather.feels_like_f : weather.feels_like} units={units}/>\r\n                        <Wind speed={weather.wind.speed} speed_mph={weather.wind.speed_mph} deg={weather.wind.deg}\r\n                              gust={weather.wind.gust} gust_mph={weather.wind.gust_mph} units={units}/>\r\n                        <Type type={weather.weather}/>\r\n                        <Details humidity={weather.humidity} pressure={weather.pressure} clouds={weather.clouds}/>\r\n                        <TimeFetcher coordinates={coordinates}/>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return <p>Loading...</p>;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {weatherOutput()}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default WeatherDetails;\r\n"],"names":["_ref","temp","feels_like","units","_jsxs","id","className","children","type","imageUrl","setImageUrl","React","icon","useEffect","timeoutId","resizeListener","clearTimeout","size","document","getElementById","width","setTimeout","slice","window","addEventListener","removeEventListener","_jsx","description","height","src","alt","ASTRONOMY","WEATHER","DayNightCycle","lazy","convertTime","time","Math","floor","Date","parse","toDateString","coordinates","coords","timeSetter","options","method","url","params","q","headers","async","mock","response","axios","request","then","res","data","catch","err","console","log","isMock","moon_illumination","parseInt","astronomy","astro","moon_phase","moonrise","moonset","sunrise","sunset","localtime_epoch","location","localtime","timeDifference","moonPhase","moonIllumination","Arrow","viewBox","fill","xmlns","d","spring","stiffness","damping","mass","deg","ref","inView","useInView","threshold","hasAnimated","setHasAnimated","useState","motion","div","transition","initial","animate","variants","visible","rotate","hidden","speed","speed_mph","gust","gust_mph","Compass","humidity","pressure","clouds","backdrop","opacity","modal","y","delay","showModal","setShowModal","buttonText","promptText","buttonAction","AnimatePresence","exit","onClick","WeatherAPI","getWeather","weather","current","temp_c","temp_f","feelslike_c","feels_like_f","feelslike_f","pressure_mb","cloud","condition","text","wind","wind_kph","wind_mph","wind_degree","gust_kph","name","country","lat","lon","error","message","setLoading","setWeather","setLocation","setMessage","weatherData","element","scrollIntoView","behavior","Modal","Temperature","Wind","Type","Details","TimeFetcher"],"sourceRoot":""}