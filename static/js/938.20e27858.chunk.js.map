{"version":3,"file":"static/js/938.20e27858.chunk.js","mappings":"mLAEMA,EAAW,kBAAMC,OAAOC,YACvBC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,aA+BrB,MA7BA,WAEI,OAAwBE,EAAAA,EAAAA,UAASP,KAAjC,eAAKQ,EAAL,KAAYC,EAAZ,KAyBA,OArBAC,EAAAA,EAAAA,YAAU,WAEN,IAAIC,EAAmC,KACjCC,EAAiB,WAEfD,GACAE,aAAaF,GAGjBA,EAAYG,YAAW,kBAAML,EAAST,OAAa,KAMvD,OAHAC,OAAOc,iBAAiB,SAAUH,GAG3B,WAEHX,OAAOe,oBAAoB,SAAUJ,MAE1C,IAEIJ,G,SCXX,IAAMS,EAAc,SAACC,GACF,OAAXA,GAA+C,OAA5BA,EAAOC,WAAW,OAErCD,EAAOC,WAAW,MAAMC,UAAU,EAAG,EAAGF,EAAOV,MAAOU,EAAOG,SAuMrE,EA9LsB,SAAC,GAA4F,IAA3FC,EAA0F,EAA1FA,QAASC,EAAiF,EAAjFA,OAAQC,EAAyE,EAAzEA,gBAAiBC,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,iBACjF,GAAkCpB,EAAAA,EAAAA,UAAiB,GAAnD,eAAkBqB,GAAlB,WACIC,EAAW,EACTC,EAAc,GACdC,EAAYR,EAASD,EACrBU,EAAqBD,EAAS,MAC9BE,EAAgC,IAAlBT,EACdU,EAAsB,IAATX,EACbY,EAAwB,IAAVb,EAEdc,GAAwBH,EADTI,KAAKC,MAAM,IAAIC,MAAK,IAAIA,MAAOC,UAA6B,IAAjBf,GAAuBgB,SAAS,EAAG,EAAG,EAAG,KAC7C,IAEtDC,EAAoB,IAAIH,KAAKJ,GAAaQ,qBAAqBC,MAAM,GAAI,GACzEC,EAAmB,IAAIN,KAAKL,GAAYS,qBAAqBC,MAAM,GAAI,GACvEE,EAAoB,IAAIP,KAAKN,GAAaU,qBAAqBC,MAAM,GAAI,GAEzEG,EAAeC,IACfC,EAAcF,EAAe,IAA4B,IAArBA,EAAe,IAAkC,KAArBA,EAAe,IAEjFG,EAAsB,KACpBC,EAAU,SAACC,GACA,OAATF,IACAA,EAAOb,KAAKC,MAAMc,KA4EpBC,EAAgB,SAAhBA,EAAiBC,EAA+B9C,EAAea,EAAgBkC,EAAeC,GAGhG,IAFA,IAAMC,EAAkBpB,KAAKqB,IAAIrB,KAAKsB,KAAYnD,EAAQsB,EAAf,IAA8BO,KAAKuB,IAAKpD,EAAQsB,EAAcD,EAAYrB,EAAQ6B,KAAKwB,MAC9HC,EAAKP,EACAQ,EAAI,EAAGA,EAAIN,EAAiBM,IAAK,CACtC,IAAMC,EAAI3C,EAAS,EAEb4C,IADNH,EACqBtD,EAAQ6B,KAAKwB,GAAK,EACjCK,EAAKF,EAAI3C,EAAS,EAAIgB,KAAK8B,IAAIF,GAQrC,GAPIX,IACAA,EAAIc,YACJd,EAAIe,OAAOP,EAAK,EAAGN,GACnBF,EAAIgB,OAAOR,EAAII,GACfZ,EAAIiB,UAGJT,GAAMZ,EAAM,CACZ,IAAMsB,EAAUrE,SAASsE,eAAe,WACxC,GAAID,EAAS,CACT,IAAME,EAAOF,EAAQrD,WAAW,MAChC,GAAIuD,EAAM,CACNzD,EAAYuD,GACZ,IAAMG,EAAQT,GAAMV,EAAU,UAAY,UAC1CkB,EAAKE,YAAcD,EACnBD,EAAKG,UAAYF,EACjBD,EAAKN,YACLM,EAAKI,IAAIhB,EAAII,EAAI1D,EAAQ,GAAI,EAAG,EAAI6B,KAAKwB,IACzCa,EAAKK,OACLL,EAAKH,cAKrB1C,GACgBC,GACZkD,uBAAsB,kBAAM3B,EAAcC,EAAK9C,EAAOa,EAAQyC,EAAIN,OAoC1E,OAhCA9C,EAAAA,EAAAA,YAAU,WACN,IAAIuE,EAAgC,KAChCtE,EAAmC,KACjCC,EAAiB,WACfD,GACAE,aAAaF,GAEjBA,EAAYG,YAAW,kBArHb,WACdoC,EAAO,KACP,IAAMhC,EAASf,SAASsE,eAAe,WACvC,GAAIvD,EAAQ,CACR,IAAMoC,EAAMpC,EAAOC,WAAW,MACxBX,EAAQU,EAAOV,MACfa,EAASH,EAAOG,OAChBmC,EAAUnC,EAAS,EAAI,EAAIW,EAAqBX,EAAS,EAE/D,GADA8B,EAAQ3C,EAAQ,GAAK,GAAK,GAAK4B,GAC3BkB,EAAK,CACLrC,EAAYC,GACZ,IAAMgE,EAAmB5B,EAAI6B,qBAAqB,EAAG3B,EAAUnC,EAAS,GAAI,EAAGmC,EAAUnC,EAAS,IAClG6D,EAAiBE,aAAa,EAAG,WACjCF,EAAiBE,aAAa,EAAG,WACjCF,EAAiBE,aAAa5B,EAAUnC,EAAS,EAAI,EAAG,WACxDiC,EAAIsB,YAAcM,EAClB,IAAIpB,EAAK,EACT,IAAKjC,EAAW,EAAGA,GAAYC,EAAaD,IAExC,IADA,IAAM4B,EAAkBpB,KAAKqB,IAAIrB,KAAKsB,KAAYnD,EAAQsB,EAAf,IAA8BO,KAAKuB,IAAKpD,EAAQsB,EAAcD,EAAYrB,EAAQ6B,KAAKwB,MACzHwB,EAAI,EAAGA,EAAI5B,EAAiB4B,IAAK,CACtC,IAAMrB,EAAI3C,EAAS,EAEb4C,IADNH,EACqBtD,EAAQ6B,KAAKwB,GAAK,EACjCK,EAAKF,EAAI3C,EAAS,EAAIgB,KAAK8B,IAAIF,GAQrC,GAPIX,IACAA,EAAIc,YACJd,EAAIe,OAAOP,EAAK,EAAGN,GACnBF,EAAIgB,OAAOR,EAAII,GACfZ,EAAIiB,UAGJT,GAAMZ,EAAM,CACZ,IAAMsB,EAAUrE,SAASsE,eAAe,WACxC,GAAID,EAAS,CACT,IAAME,EAAOF,EAAQrD,WAAW,MAChC,GAAIuD,EAAM,CACNzD,EAAYuD,GACZ,IAAMG,EAAQT,GAAMV,EAAU,UAAY,UAC1CkB,EAAKE,YAAcD,EACnBD,EAAKG,UAAYF,EACjBD,EAAKN,YACLM,EAAKI,IAAIhB,EAAII,EAAI1D,EAAQ,GAAI,EAAG,EAAI6B,KAAKwB,IACzCa,EAAKK,OACLL,EAAKH,eA0EAe,KAAa,KAgB9C,OAdA1D,GAAa,SAAA2D,GAAI,OAAIA,EAAO,KAC5BN,EAAWO,aAAY,WAxK/B,IAAsBC,EACF,QADEA,EAyKOtF,SAASsE,eAAe,aArKpCgB,EAAQC,wBAEZC,KAAOF,EAAQG,aAAa,IAoKrBX,GACAY,cAAcZ,GAIlBhE,EAAYd,SAASsE,eAAe,YACpCxD,EAAYd,SAASsE,eAAe,YA3EvB,WACrB,IAAMvD,EAASf,SAASsE,eAAe,WACvC,GAAIvD,EAAQ,CACR,IAAMoC,EAAMpC,EAAOC,WAAW,MACxBX,EAAQU,EAAOV,MACfa,EAASH,EAAOG,OAChBmC,EAAUnC,EAAS,EAAI,EAAIW,EAAqBX,EAAS,EAE/D,GADA8B,EAAQ3C,EAAQ,GAAK,GAAK,GAAK4B,GAC3BkB,EAAK,CACL,IAAM4B,EAAmB5B,EAAI6B,qBAAqB,EAAG3B,EAAUnC,EAAS,GAAI,EAAGmC,EAAUnC,EAAS,IAClG6D,EAAiBE,aAAa,EAAG,WACjCF,EAAiBE,aAAa,EAAG,WACjCF,EAAiBE,aAAa5B,EAAUnC,EAAS,EAAI,EAAG,WACxDiC,EAAIsB,YAAcM,EAClBF,uBAAsB,kBAAM3B,EAAcC,EAAK9C,EAAOa,EAAQ,EAAGmC,QA8DjEsC,GACA7F,OAAOc,iBAAiB,SAAUH,MAEvC,KACI,WACCqE,IACAY,cAAcZ,GACdhF,OAAOe,oBAAoB,SAAUJ,OAG9C,CAACU,EAASC,KAIT,iBAAKwE,GAAI,gBAAiBC,UAAU,YAApC,WACI,6CACA,iBAAKA,UAAU,UAAf,WACI,qCAAatD,MACb,iBAAMsD,UAAW,UACjB,eAAGA,UAAW,SAAd,qBAAiCnD,MACjC,iBAAMmD,UAAW,UACjB,eAAGA,UAAW,SAAd,2BAAuClD,MACvC,iBAAMkD,UAAW,UACjB,uCACK3D,KAAKC,MAAMP,EAAY,GAAK,IADjC,IACuCM,KAAKC,OAAOP,EAA8C,GAAlCM,KAAKC,MAAMP,EAAY,GAAK,IAAW,IAAM,WAEhH,iBAAKgE,GAAI,yBAAT,WACI,mBAAQA,GAAI,UAAWvF,MAAOyC,EAAa5B,OAAsB,GAAd4B,KACnD,mBAAQ8C,GAAI,UAAWvF,MAAOyC,EAAa5B,OAAsB,GAAd4B,QAEvD,eAAG8C,GAAI,OAAP,yBAA4BrE,EAA5B,wBAA4DC,EAA5D","sources":["Helpers/useCurrentWidth.ts","Modules/WeatherData/DayNightCycle.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst getWidth = () => window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n\r\nfunction useCurrentWidth() {\r\n    // save current window width in the state object\r\n    let [width, setWidth] = useState(getWidth());\r\n\r\n    // in this case useEffect will execute only once because\r\n    // it does not have any dependencies.\r\n    useEffect(() => {\r\n        // timeoutId for debounce mechanism\r\n        let timeoutId: NodeJS.Timeout | null = null;\r\n        const resizeListener = () => {\r\n            // prevent execution of previous setTimeout\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            // change width from the state object after 150 milliseconds\r\n            timeoutId = setTimeout(() => setWidth(getWidth()), 10);\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        // clean up function\r\n        return () => {\r\n            // remove resize listener\r\n            window.removeEventListener('resize', resizeListener);\r\n        }\r\n    }, [])\r\n\r\n    return width;\r\n}\r\nexport default useCurrentWidth;\r\n","import React, {useEffect, useState} from 'react';\r\nimport useCurrentWidth from \"../../Helpers/useCurrentWidth\";\r\n\r\ninterface Cycle {\r\n    sunrise: number,\r\n    sunset: number,\r\n    localtime_epoch: number,\r\n    timeDifference: number;\r\n    moonPhase: string;\r\n    moonIllumination: number;\r\n}\r\n\r\nfunction isInViewport(element: HTMLElement | null): boolean {\r\n    if (element === null) {\r\n        return false;\r\n    }\r\n    const rect = element.getBoundingClientRect();\r\n    return (\r\n        rect.top >= element.clientHeight/2\r\n    );\r\n}\r\n\r\nconst clearCanvas = (canvas: HTMLCanvasElement | null) => {\r\n    if (canvas !== null && canvas.getContext('2d') !== null) {\r\n        // @ts-ignore\r\n        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n}\r\n/**\r\n * @description This component is responsible for drawing the day/night cycle\r\n * @param sunrise timestamp of sunrise in seconds\r\n * @param sunset timestamp of sunset in seconds\r\n * @param timezone timezone offset in seconds\r\n */\r\nconst DayNightCycle = ({sunrise, sunset, localtime_epoch, timeDifference, moonPhase, moonIllumination}: Cycle) => {\r\n    const [intervals, setIntervals] = useState<number>(0);\r\n    let mainStep = 0;\r\n    const maxMainStep = 90;\r\n    const dayLength = sunset - sunrise;\r\n    const dayNightProportion = dayLength / (24 * 60 * 60);\r\n    const currentDate = localtime_epoch * 1000;\r\n    const sunsetDate = sunset * 1000;\r\n    const sunriseDate = sunrise * 1000;\r\n    const midnightDate = Math.floor(new Date(new Date().getTime() + timeDifference * 1000).setHours(0, 0, 0, 0));\r\n    const secondsSinceMidnight = (currentDate - midnightDate) / 1000;\r\n\r\n    const sunriseDateString = new Date(sunriseDate).toLocaleTimeString().slice(0, -3);\r\n    const sunsetDateString = new Date(sunsetDate).toLocaleTimeString().slice(0, -3);\r\n    const currentDateString = new Date(currentDate).toLocaleTimeString().slice(0, -3);\r\n\r\n    const currentWidth = useCurrentWidth();\r\n    const canvasWidth = currentWidth > 768 ? (currentWidth - 60) * 0.9 : (currentWidth - 60) * 0.98;\r\n\r\n    let SunX: number | null = null;\r\n    const setSunX = (val: number) => {\r\n        if (SunX === null) {\r\n            SunX = Math.floor(val);\r\n        }\r\n    }\r\n\r\n    const quickDraw = () => {\r\n        SunX = null;\r\n        const canvas = document.getElementById('canvas1') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            const ctx = canvas.getContext('2d');\r\n            const width = canvas.width;\r\n            const height = canvas.height;\r\n            const horizon = height / 6 * 4 * dayNightProportion + height / 6;\r\n            setSunX(width / 24 / 60 / 60 * secondsSinceMidnight);\r\n            if (ctx) {\r\n                clearCanvas(canvas);\r\n                const dayNightGradient = ctx.createLinearGradient(0, horizon - height / 15, 0, horizon + height / 20);\r\n                dayNightGradient.addColorStop(0, '#487aff');\r\n                dayNightGradient.addColorStop(1, '#111f69');\r\n                dayNightGradient.addColorStop(horizon / height + 1 / 6, '#ff9116');\r\n                ctx.strokeStyle = dayNightGradient;\r\n                let x2 = 0;\r\n                for (mainStep = 0; mainStep <= maxMainStep; mainStep++) {\r\n                    const substepsPerStep = Math.abs(Math.ceil(1.5 * (width / maxMainStep) * Math.sin((width / maxMainStep * mainStep) / width * Math.PI)));\r\n                    for (let j = 0; j < substepsPerStep; j++) {\r\n                        const y = height / 2;\r\n                        x2++;\r\n                        const radians = x2 / width * Math.PI * 2;\r\n                        const y2 = y + height / 3 * Math.cos(radians);\r\n                        if (ctx) {\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(x2 - 1, horizon);\r\n                            ctx.lineTo(x2, y2);\r\n                            ctx.stroke();\r\n                        }\r\n                        // @ts-ignore\r\n                        if (x2 <= SunX) {\r\n                            const canvas2 = document.getElementById('canvas2') as HTMLCanvasElement;\r\n                            if (canvas2) {\r\n                                const ctx2 = canvas2.getContext('2d');\r\n                                if (ctx2) {\r\n                                    clearCanvas(canvas2);\r\n                                    const color = y2 <= horizon ? '#ffe100' : '#525d5d';\r\n                                    ctx2.strokeStyle = color;\r\n                                    ctx2.fillStyle = color;\r\n                                    ctx2.beginPath();\r\n                                    ctx2.arc(x2, y2, width / 40, 0, 2 * Math.PI);\r\n                                    ctx2.fill();\r\n                                    ctx2.stroke();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const initialAnimation = () => {\r\n        const canvas = document.getElementById('canvas1') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            const ctx = canvas.getContext('2d');\r\n            const width = canvas.width;\r\n            const height = canvas.height;\r\n            const horizon = height / 6 * 4 * dayNightProportion + height / 6;\r\n            setSunX(width / 24 / 60 / 60 * secondsSinceMidnight);\r\n            if (ctx) {\r\n                const dayNightGradient = ctx.createLinearGradient(0, horizon - height / 15, 0, horizon + height / 20);\r\n                dayNightGradient.addColorStop(0, '#487aff');\r\n                dayNightGradient.addColorStop(1, '#111f69');\r\n                dayNightGradient.addColorStop(horizon / height + 1 / 6, '#ff9116');\r\n                ctx.strokeStyle = dayNightGradient;\r\n                requestAnimationFrame(() => animationStep(ctx, width, height, 0, horizon));\r\n            }\r\n        }\r\n    }\r\n\r\n    const animationStep = (ctx: CanvasRenderingContext2D, width: number, height: number, prevX: number, horizon: number) => {\r\n        const substepsPerStep = Math.abs(Math.ceil(1.5 * (width / maxMainStep) * Math.sin((width / maxMainStep * mainStep) / width * Math.PI)));\r\n        let x2 = prevX;\r\n        for (let i = 0; i < substepsPerStep; i++) {\r\n            const y = height / 2;\r\n            x2++;\r\n            const radians = x2 / width * Math.PI * 2;\r\n            const y2 = y + height / 3 * Math.cos(radians);\r\n            if (ctx) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(x2 - 1, horizon);\r\n                ctx.lineTo(x2, y2);\r\n                ctx.stroke();\r\n            }\r\n            // @ts-ignore\r\n            if (x2 <= SunX) {\r\n                const canvas2 = document.getElementById('canvas2') as HTMLCanvasElement;\r\n                if (canvas2) {\r\n                    const ctx2 = canvas2.getContext('2d');\r\n                    if (ctx2) {\r\n                        clearCanvas(canvas2);\r\n                        const color = y2 <= horizon ? '#ffe100' : '#525d5d';\r\n                        ctx2.strokeStyle = color;\r\n                        ctx2.fillStyle = color;\r\n                        ctx2.beginPath();\r\n                        ctx2.arc(x2, y2, width / 40, 0, 2 * Math.PI);\r\n                        ctx2.fill();\r\n                        ctx2.stroke();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mainStep++;\r\n        if (mainStep <= maxMainStep) {\r\n            requestAnimationFrame(() => animationStep(ctx, width, height, x2, horizon));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval: null | NodeJS.Timer = null;\r\n        let timeoutId: NodeJS.Timeout | null = null;\r\n        const resizeListener = () => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            timeoutId = setTimeout(() => quickDraw(), 10);\r\n        };\r\n        setIntervals(prev => prev + 1);\r\n        interval = setInterval(() => {\r\n            if (isInViewport(document.getElementById('canvas1'))) {\r\n                if (interval) {\r\n                    clearInterval(interval);\r\n                }\r\n\r\n                // @ts-ignore\r\n                clearCanvas(document.getElementById('canvas1'));\r\n                clearCanvas(document.getElementById('canvas2') as HTMLCanvasElement);\r\n                initialAnimation();\r\n                window.addEventListener('resize', resizeListener);\r\n            }\r\n        }, 100);\r\n        return () => {\r\n            if (interval) {\r\n                clearInterval(interval);\r\n                window.removeEventListener('resize', resizeListener);\r\n            }\r\n        }\r\n    }, [sunrise, sunset]);\r\n\r\n\r\n    return (\r\n        <div id={'dayNightCycle'} className=\"mainBoxes\">\r\n            <h3>Day/night cycle</h3>\r\n            <div className=\"wrapper\">\r\n                <p>sunrise: {sunriseDateString}</p>\r\n                <span className={'line'}/>\r\n                <p className={'center'}>sunset: {sunsetDateString}</p>\r\n                <span className={'line'}/>\r\n                <p className={'center'}>current time: {currentDateString}</p>\r\n                <span className={'line'}/>\r\n                <p>day length:\r\n                    {Math.floor(dayLength / 60 / 60)}:{Math.floor((dayLength - Math.floor(dayLength / 60 / 60) * 60 * 60) / 60)}</p>\r\n            </div>\r\n            <div id={'dayNightCycleContainer'}>\r\n                <canvas id={'canvas1'} width={canvasWidth} height={canvasWidth * 0.3}/>\r\n                <canvas id={'canvas2'} width={canvasWidth} height={canvasWidth * 0.3}/>\r\n            </div>\r\n            <p id={'moon'}>Moon phase: {moonPhase}, Moon illumination: {moonIllumination}%</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayNightCycle;\r\n"],"names":["getWidth","window","innerWidth","document","documentElement","clientWidth","body","useState","width","setWidth","useEffect","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","clearCanvas","canvas","getContext","clearRect","height","sunrise","sunset","localtime_epoch","timeDifference","moonPhase","moonIllumination","setIntervals","mainStep","maxMainStep","dayLength","dayNightProportion","currentDate","sunsetDate","sunriseDate","secondsSinceMidnight","Math","floor","Date","getTime","setHours","sunriseDateString","toLocaleTimeString","slice","sunsetDateString","currentDateString","currentWidth","useCurrentWidth","canvasWidth","SunX","setSunX","val","animationStep","ctx","prevX","horizon","substepsPerStep","abs","ceil","sin","PI","x2","i","y","radians","y2","cos","beginPath","moveTo","lineTo","stroke","canvas2","getElementById","ctx2","color","strokeStyle","fillStyle","arc","fill","requestAnimationFrame","interval","dayNightGradient","createLinearGradient","addColorStop","j","quickDraw","prev","setInterval","element","getBoundingClientRect","top","clientHeight","clearInterval","initialAnimation","id","className"],"sourceRoot":""}